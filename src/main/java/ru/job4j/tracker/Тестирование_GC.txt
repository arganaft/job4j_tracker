Протестировал следующие виды GC:
- Serial
- Parallel
- CMS
- G1
- ZGC
с использованием утилиты jconsole, реализация Store была через MemTracker

Тест был общим для всех и следовал по следующим шагам:
1. создание 200 тыс. заявок.
2. удаление всех заявок.
3. шаги 1 и 2 повторял 5 раз и замерял скорость выполнения каждого шага

Итоги тестов:
- Serial GC ключ -XX:+UseSerialGC
    1. Добавление: 317 Удаление: 9656
    2. Добавление: 269 Удаление: 8924
    3. Добавление: 351 Удаление: 8600
    4. Добавление: 150 Удаление: 8430
    5. Добавление: 218 Удаление: 8384
    6. Добавление: 208 Удаление: 7985
    7. Добавление: 269 Удаление: 8164
    8. Добавление: 102 Удаление: 8318
    9. Добавление: 174 Удаление: 8038
    10. Добавление: 107  Удаление: 8112
    Used: 21529 kbytes
    Committed: 23104 kbytes
    Max: 266560 kbytes
    GC time:0,865 seconds on Copy (26 collections)
            0,594 seconds on MarkSweepCompact (6 collections)

    Практические выводы: Использует мало памяти, но часто вызывает сборку мусора отчего получаем
    большие паузы при работе


- Parallel GC ключ -XX:+UseParallelGC
    1. Добавление: 422 Удаление: 8674
    2. Добавление: 81 Удаление: 9311
    3. Добавление: 70 Удаление: 8510
    4. Добавление: 91 Удаление: 8488
    5. Добавление: 71 Удаление: 9211
    6. Добавление: 52 Удаление: 8253
    7. Добавление: 39 Удаление: 8228
    8. Добавление: 43 Удаление: 9998
    9. Добавление: 39 Удаление: 8667
    10. Добавление: 79 Удаление: 8424
    Used: 193 246 kbytes
    Committed: 214 528 kbytes
    Max: 888 832 kbytes
    GC time:  0,148 seconds on PS MarkSweep (1 collections)
              0,207 seconds on PS Scavenge (9 collections)

    Практические выводы: В нашем примере работал эффективнее всех,
    возможно за счет использования большого количества памяти, от чего сборка мусора вызывалась редко


- G1 ключ -XX:+UseG1GC
    1. Добавление: 311 Удаление: 9982
    2. Добавление: 122 Удаление: 8462
    3. Добавление: 191 Удаление: 8532
    4. Добавление: 107 Удаление: 8586
    5. Добавление: 125 Удаление: 8525
    6. Добавление: 153 Удаление: 8777
    7. Добавление: 71 Удаление: 8689
    8. Добавление: 75 Удаление: 8548
    9. Добавление: 72 Удаление: 8431
    10. Добавление: 74 Удаление: 8539
    Used: 113 107 kbytes
    Committed: 211 968 kbytes
    Max: 999 424 kbytes
    GC time: 0,636 seconds on G1 Young Generation (30 collections)
             0,000 seconds on G1 Old Generation (0 collections)

    Практические выводы: на машине на которой я запускал тест очень мало памяти (всего 4 гб) плюс запущены
    кучу различных приложений, и так как G1 требователен к объему памяти, он показал эфективность по части скорости
    работы хуже, чем Parallel GC, но зато совсем не было задержки Stop The World

- ZGC ключ -XX:+UseZGC
    1. Добавление: 256 Удаление: 66521
    2. Добавление: 264 Удаление: 64200
    3. Добавление: 116 Удаление: 67054
    4. Добавление: 84 Удаление: 65969
    5. Добавление: 59 Удаление: 63441
    6. Добавление: 56 Удаление: 64370
    7. Добавление: 48 Удаление: 71478
    8. Добавление: 143 Удаление: 71352
    9. Добавление: 116 Удаление: 63684
    10. Добавление: 66 Удаление: 63260
    Used: 104 448 kbytes
    Committed: 198 656 kbytes
    Max: 999 424 kbytes
    GC time: 48,040 seconds on ZGC Cycles (11 collections)
              0,000 seconds on ZGC Pauses (33 collections)

    Практические выводы: Самое медленное выполнение теста на моей машине, он чаще всех вызывал сборку мусора.
    Это произошло скорее всего из-за того что он более требователен к обьему памяти, чем даже G1.
    Но зато он показал отсутствие задержек при выполнении.




